import { SlashCommandBuilder, ChatInputCommandInteraction, Collection, PermissionsBitField, EmbedBuilder, Colors } from 'discord.js';
import Command from '../types/Command';
// Trao quy·ªÅn l·ª±c cho con bot

const BanCommand: Command = {
    data: new SlashCommandBuilder()
        .setName('ban')
        .setDescription('Ban m·ªôt th√†nh vi√™n')
        .addUserOption(option => option.setName('user').setDescription('User c·∫ßn ban').setRequired(true))
        .addStringOption(option => option.setName('reason').setDescription('L√Ω do').setRequired(false)),
    async execute(interaction: ChatInputCommandInteraction): Promise<void> {
        const targetUser = interaction.options.getUser('user');
        const reason = interaction.options.getString('reason') ?? 'Kh√¥ng n√≥i nhi·ªÅu';

        if (!targetUser) {
            const errorEmbed = new EmbedBuilder()
                .setColor(Colors.Red)
                .setTitle('‚ùå L·ªói')
                .setDescription('Kh√¥ng t√¨m th·∫•y user!')
                .setTimestamp();
            
            await interaction.reply({ 
                embeds: [errorEmbed]
            });
            return;
        }

        const targetMember = interaction.guild?.members.cache.get(targetUser.id);
        const adminPermission = [PermissionsBitField.Flags.BanMembers, PermissionsBitField.Flags.KickMembers, PermissionsBitField.Flags.ManageChannels, PermissionsBitField.Flags.Administrator];
        
        if (adminPermission.some(permission => targetMember?.permissions.has(permission))) {
            const errorEmbed = new EmbedBuilder()
                .setColor(Colors.Red)
                .setTitle('‚ùå L·ªói')
                .setDescription(`Ai cho ban ${targetUser.username}!`)
                .setTimestamp();
            
            await interaction.reply({  
                embeds: [errorEmbed]
            });
            return;
        }

        try {
            await targetMember?.ban({ reason });
            
            const successEmbed = new EmbedBuilder()
                .setColor(Colors.Green)
                .setTitle('‚úÖ Ban Th√†nh C√¥ng')
                .setDescription(`ƒê√£ ban th√†nh vi√™n ${targetUser.username}`)
                .addFields(
                    { name: 'Th√†nh vi√™n', value: `${targetUser.tag}`, inline: true },
                    { name: 'üìù L√Ω do', value: reason, inline: true },
                    { name: 'üõ°Ô∏è B·ªüi', value: `${interaction.user.tag}`, inline: true }
                )
                .setThumbnail(targetUser.displayAvatarURL())
                .setTimestamp();

            await interaction.reply({ 
                embeds: [successEmbed]
            });
        } catch (error) {
            const errorEmbed = new EmbedBuilder()
                .setColor(Colors.Red)
                .setTitle('‚ùå L·ªói')
                .setDescription('Kh√¥ng th·ªÉ ban th√†nh vi√™n n√†y!')
                .setTimestamp();
            
            await interaction.reply({ 
                embeds: [errorEmbed]
            });
        }
    }
}

const unbanCommand: Command = {
    data: new SlashCommandBuilder()
        .setName('unban')
        .setDescription('Unban m·ªôt th√†nh vi√™n')
        .addStringOption(option => option.setName('user').setDescription('ID c·ªßa user c·∫ßn unban').setRequired(true)),
    async execute(interaction: ChatInputCommandInteraction): Promise<void> {
        const userId = interaction.options.getString('user');
        if (!userId) {
            const errorEmbed = new EmbedBuilder()
                .setColor(Colors.Red)
                .setTitle('‚ùå L·ªói')
                .setDescription('Vui l√≤ng nh·∫≠p ID c·ªßa user!')
                .setTimestamp();
            
            await interaction.reply({ 
                embeds: [errorEmbed]
            });
            return;
        }

        try {
            // L·∫•y danh s√°ch ban
            const bans = await interaction.guild?.bans.fetch();
            const bannedUser = bans?.find(ban => ban.user.id === userId);

            if (!bannedUser) {
                const errorEmbed = new EmbedBuilder()
                    .setColor(Colors.Red)
                    .setTitle('‚ùå L·ªói')
                    .setDescription('Kh√¥ng t√¨m th·∫•y user trong danh s√°ch ban!')
                    .setTimestamp();
                
                await interaction.reply({ 
                    embeds: [errorEmbed]
                });
                return;
            }

            // Th·ª±c hi·ªán unban
            await interaction.guild?.members.unban(userId);

            const successEmbed = new EmbedBuilder()
                .setColor(Colors.Green)
                .setTitle('‚úÖ Unban Th√†nh C√¥ng')
                .setDescription(`ƒê√£ unban th√†nh vi√™n ${bannedUser.user.tag}`)
                .addFields(
                    { name: 'üë§ Th√†nh vi√™n', value: bannedUser.user.tag, inline: true },
                    { name: 'üõ°Ô∏è B·ªüi', value: interaction.user.tag, inline: true }
                )
                .setThumbnail(bannedUser.user.displayAvatarURL())
                .setTimestamp();

            await interaction.reply({ 
                embeds: [successEmbed]
            });

        } catch (error) {
            const errorEmbed = new EmbedBuilder()
                .setColor(Colors.Red)
                .setTitle('‚ùå L·ªói')
                .setDescription('Kh√¥ng th·ªÉ unban th√†nh vi√™n n√†y!')
                .setTimestamp();
            
            await interaction.reply({ 
                embeds: [errorEmbed]
            });
        }   
    }
}  

const MuteCommand: Command = {
    data: new SlashCommandBuilder()
        .setName('mute')
        .setDescription('Mute m·ªôt th√†nh vi√™n')
        .addUserOption(option => option.setName('target').setDescription('User c·∫ßn mute').setRequired(true))
        .addStringOption(option => option.setName('duration').setDescription('Th·ªùi gian (v√≠ d·ª•: 1h30m, 10m, 30s)').setRequired(true))
        .addStringOption(option => option.setName('reason').setDescription('L√Ω do').setRequired(false))
        .addBooleanOption(option => option.setName('silent').setDescription('·∫®n th√¥ng b√°o v·ªõi user b·ªã mute?').setRequired(false)),
    async execute(interaction: ChatInputCommandInteraction): Promise<void> {
        if (!interaction.memberPermissions?.has(PermissionsBitField.Flags.ModerateMembers) &&
            !interaction.memberPermissions?.has(PermissionsBitField.Flags.Administrator)) {
            await interaction.reply({ content: 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!', ephemeral: true });
            return;
        }

        const targetUser = interaction.options.getUser('target');
        const durationStr = interaction.options.getString('duration');
        const reason = interaction.options.getString('reason') ?? 'Kh√¥ng n√≥i nhi·ªÅu';
        const silent = interaction.options.getBoolean('silent') ?? false;

        if (!targetUser || !durationStr) {
            await interaction.reply({ content: 'Thi·∫øu th√¥ng tin!', ephemeral: true });
            return;
        }

        // Parse duration
        const match = durationStr.match(/(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?/);
        if (!match) {
            await interaction.reply({ content: 'Sai ƒë·ªãnh d·∫°ng th·ªùi gian!', ephemeral: true });
            return;
        }
        const hours = parseInt(match[1] ?? '0');
        const minutes = parseInt(match[2] ?? '0');
        const seconds = parseInt(match[3] ?? '0');
        const durationMs = (hours * 3600 + minutes * 60 + seconds) * 1000;
        if (durationMs <= 0) {
            await interaction.reply({ content: 'Th·ªùi gian ph·∫£i l·ªõn h∆°n 0!', ephemeral: true });
            return;
        }

        const targetMember = interaction.guild?.members.cache.get(targetUser.id);
        if (!targetMember) {
            await interaction.reply({ content: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n!', ephemeral: true });
            return;
        }

        if (targetMember.permissions.has(PermissionsBitField.Flags.Administrator) ||
            targetMember.permissions.has(PermissionsBitField.Flags.ModerateMembers)) {
            await interaction.reply({ content: `Kh√¥ng th·ªÉ mute ${targetUser.username}!`, ephemeral: true });
            return;
        }

        try {
            await targetMember.timeout(durationMs, reason);

            const embed = new EmbedBuilder()
                .setColor(Colors.Orange)
                .setTitle('üîá ƒê√£ mute th√†nh vi√™n')
                .addFields(
                    { name: 'üë§ Th√†nh vi√™n', value: targetUser.tag, inline: true },
                    { name: '‚è∞ Th·ªùi gian', value: durationStr, inline: true },
                    { name: 'üìù L√Ω do', value: reason, inline: true },
                    { name: 'üõ°Ô∏è B·ªüi', value: interaction.user.tag, inline: true }
                )
                .setThumbnail(targetUser.displayAvatarURL())
                .setTimestamp();

            if (silent) {
                await interaction.reply({ embeds: [embed], ephemeral: true });
            }

            if (!silent) {
                await interaction.reply({ embeds: [embed] });
            }
        } catch (error) {
            await interaction.reply({ content: 'Kh√¥ng th·ªÉ mute th√†nh vi√™n n√†y!', ephemeral: true });
        }
    }
};

const UnmuteCommand: Command = {
    data: new SlashCommandBuilder()
        .setName('unmute')
        .setDescription('Unmute m·ªôt th√†nh vi√™n')
        .addUserOption(option => option.setName('target').setDescription('User c·∫ßn unmute').setRequired(true))
        .addBooleanOption(option => option.setName('silent').setDescription('·∫®n th√¥ng b√°o v·ªõi user b·ªã unmute?').setRequired(false)),
    async execute(interaction: ChatInputCommandInteraction): Promise<void> {
        if (!interaction.memberPermissions?.has(PermissionsBitField.Flags.ModerateMembers) &&
            !interaction.memberPermissions?.has(PermissionsBitField.Flags.Administrator)) {
            await interaction.reply({ content: 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!', ephemeral: true });
            return;
        }

        const targetUser = interaction.options.getUser('target');
        const silent = interaction.options.getBoolean('silent') ?? false;

        if (!targetUser) {
            await interaction.reply({ content: 'Thi·∫øu th√¥ng tin!', ephemeral: true });
            return;
        }

        const targetMember = interaction.guild?.members.cache.get(targetUser.id);
        if (!targetMember) {
            await interaction.reply({ content: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n!', ephemeral: true });
            return;
        }

        if (targetMember.permissions.has(PermissionsBitField.Flags.Administrator) ||
            targetMember.permissions.has(PermissionsBitField.Flags.ModerateMembers)) {
            await interaction.reply({ content: 'Kh√¥ng th·ªÉ unmute admin ho·∫∑c mod!', ephemeral: true });
            return;
        }

        try {
            await targetMember.timeout(null);

            const embed = new EmbedBuilder()
                .setColor(Colors.Green)
                .setTitle('üîä ƒê√£ unmute th√†nh vi√™n')
                .addFields(
                    { name: 'üë§ Th√†nh vi√™n', value: targetUser.tag, inline: true },
                    { name: 'üõ°Ô∏è B·ªüi', value: interaction.user.tag, inline: true }
                )
                .setThumbnail(targetUser.displayAvatarURL())
                .setTimestamp();

            if (silent) {
                await interaction.reply({ embeds: [embed], ephemeral: true });
            } else {
                await interaction.reply({ embeds: [embed] });
            }
        } catch (error) {
            await interaction.reply({ content: 'Kh√¥ng th·ªÉ unmute th√†nh vi√™n n√†y!', ephemeral: true });
        }
    }
};

const commandModules = [BanCommand, unbanCommand, MuteCommand, UnmuteCommand];

const adminCommands = new Collection<string, Command>();

for (const command of commandModules) {
    adminCommands.set(command.data.name, command);
}

export default adminCommands;